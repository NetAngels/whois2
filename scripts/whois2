#!/usr/bin/env python
import sys
import optparse
import time
from whois2 import SUPPORTED_TLD, check, _
from multiprocessing import Pool
from blessings import Terminal
try:
    import memcache
    memcached_available = True
except ImportError:
    memcached_available = False


def get_parser():
    parser = optparse.OptionParser(usage='%prog [options] domain1.tld domain2.tld')
    parser.add_option('-r', '--registration-status', action='store_true', default=False, help=_('don\'t show the whole information, just the registration status'))
    parser.add_option('-a', '--all-tld', action='store_true', default=False, help=_('show info about current domain in every top domain'))
    parser.add_option('--ignore-registered', action='store_true', default=False, help=_('ignore registered domains'))
    parser.add_option('--ignore-unregistered', action='store_true', default=False, help=_('ignore unregistered domains'))
    parser.add_option('--ignore-invalid', action='store_true', default=False, help=_('ignore invalid domains'))
    parser.add_option('-t', '--timeout', type=int, default=0, help=_('timeout between whois queries'))
    parser.add_option('-c', '--concurrency', type=int, default=1, help=_('number of simultaneous whois processes'))
    parser.add_option('-m', '--memcached', action='store_true', default=False, help=_('use memcached to cache whois responses'))
    parser.add_option('--memcached-address', default='127.0.0.1:11211', help=_('memcached server address'))
    return parser


def get_domain_list(options, args):
    domains = []
    if options.all_tld:
        for arg in args:
            domains += [ u'{0}.{1}'.format(arg, tld) for tld in SUPPORTED_TLD ]
    else:
        domains = [domain.decode('utf-8') for domain in args]
    return domains


def print_data(options, domain_list, cache=None):
    """
    print information about domains from list

    Information is received either in one thread, or in multiple threads, if
    "concurrency" option is set up.
    """
    max_domain_length = 0
    if domain_list:
        max_domain_length = max(len(domain) for domain in domain_list)
    if options.concurrency < 2:
        for domain in domain_list:
            print_data_for_domain((options, domain, max_domain_length, cache))
    else:
        pool = Pool(processes=options.concurrency)
        data = [(options, domain, max_domain_length, cache) for domain in domains]
        pool.map(print_data_for_domain, data)


def print_data_for_domain((options, domain, max_domain_length, cache)):
    """
    print information about one given domain
    """
    print_func = options.registration_status and print_registration_status or print_info
    try:
        whois = check(domain, cache)
    except RuntimeError, e:
        print_error(_('Runtime Error: \n{0}\n').format(e))
        return
    time.sleep(options.timeout)
    print_func(domain, whois, max_domain_length)


def print_registration_status(domain, whois, max_domain_length):
    t = Terminal()
    template = ur'{{0:<{0}}} {{1:<10}} {{2}}'.format(max_domain_length)
    errors = ''
    if whois.invalid:
        if not options.ignore_invalid:
            errors = u', '.join(whois.validation_errors)
            print t.red(template.format(domain, 'INVALID', errors))
    elif whois.registered:
        if not options.ignore_registered:
            print t.green(template.format(domain, 'REGISTERED', errors))
    else:  # free domain
       if not options.ignore_unregistered:
            print t.blue(template.format(domain, 'FREE', errors))


def print_info(domain, whois, max_domain_length):
    t = Terminal()
    if whois.invalid:
        if not options.ignore_invalid:
            print t.bold_red(u'>> {0}'.format(domain))
            for error in whois.validation_errors:
                print t.red(error)
    elif whois.registered:
        if not options.ignore_registered:
            print t.bold_green(u'>> 0{}'.format(domain))
            print t.green(whois.whois_data)
    else:  # free domain
        if not options.ignore_unregistered:
            print t.bold_blue(u'>> {0}'.format(domain))
            print t.blue(_('Domain is free to register'))


def print_error(error_message):
    sys.stderr.write(Terminal(stream=sys.stderr).red(str(error_message)))


if __name__ == '__main__':
    parser = get_parser()
    options, args = parser.parse_args()
    if options.memcached:
        if not memcached_available:
            raise SystemExit('memcached python library is not installed on your system')
        cache = memcache.Client([options.memcached_address])
    else:
        cache = None
    domains = get_domain_list(options, args)
    if domains:
        print_data(options, domains, cache)
    else:
        parser.print_help()
        raise SystemExit(1)
